#!/usr/bin/env python

import rospy
from std_msgs.msg import String
import serial
import socket
import rospy
import os
import sys

import libnmea_navsat_driver.driver


class ReachSocketHandlerNav:
    # Set our parameters and the default socket to open
    def __init__(self,host,port):
        self.host = host
        self.port = port

    # Should open the connection and connect to the device
    # This will then also start publishing the information
    def start(self):
        # Try to connect to the device
        rospy.loginfo('Connecting to Reach RTK %s on port %s' % (str(self.host),str(self.port)))
        self.connect_to_device()
        try:
            # Create the driver
            #driver = reach_ros_node.driver.RosNMEADriver()
            while not rospy.is_shutdown():
                #GPS = soc.recv(1024)
                data = self.buffered_readLine().strip()
                # Debug print message line
                #print(data)
                #frame_id = libnmea_navsat_driver.driver.RosNMEADriver.get_frame_id()
                frame_id = "gps"
                driver = libnmea_navsat_driver.driver.RosNMEADriver()

                try:
                    driver.add_sentence(data, frame_id)
                except ValueError as e:
                    rospy.logwarn("Value error, likely due to missing fields in the NMEA message. Error was: %s." % e)


        except rospy.ROSInterruptException:
            # Close GPS socket when done
            self.soc.close()

    # Try to connect to the device, allows for reconnection
    # Will loop till we get a connection, note we have a long timeout
    def connect_to_device(self):
        while not rospy.is_shutdown():
            try:
                self.soc = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                self.soc.settimeout(5.0)
                self.soc.connect((self.host,self.port))
                rospy.loginfo('Successfully connected to device, starting publishing!')
                return
            except socket.timeout:
                rospy.logwarn_throttle(30,'Socket connection timeout. Retrying...')
                continue
            except Exception as e:
                rospy.logerr("Socket connection error. Error was: %s." % e)
                exit()

    # Try to connect to the device, assuming it just was disconnected
    # Will loop till we get a connection
    def reconnect_to_device(self):
        rospy.logwarn('Device disconnected. Reconnecting...')
        self.soc.close()
        self.connect_to_device()

    def buffered_readLine(self):
        line = ""
        while not rospy.is_shutdown():
            # Try to get data from it
            try:
                part = self.soc.recv(1)
            except socket.timeout:
                self.reconnect_to_device()
                continue
            # See if we need to process the data
            if not part or len(part) == 0:
                self.reconnect_to_device()
                continue
            if part != "\n":
                line += part
            elif part == "\n":
                break
        return line



if __name__ == '__main__':

    # Initialize our ros node
    rospy.init_node('reachrs_nmea_navsat')

    # Read in ROS parameters
    #    print "~host", ~host
    #host = rospy.get_param('~host', '192.168.2.15')
    #port = rospy.get_param('~port', 9001)
    host = "192.168.42.1"
    port = 9001
    # Open the socket to our device, and start streaming the data
    try:    
        device = ReachSocketHandlerNav(host,port)
        device.start()
    except rospy.ROSInterruptException:
        pass

