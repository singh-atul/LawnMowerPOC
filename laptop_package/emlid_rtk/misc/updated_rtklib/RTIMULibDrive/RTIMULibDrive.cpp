////////////////////////////////////////////////////////////////////////////
//
//  This file is part of RTIMULib
//
//  Copyright (c) 2014-2015, richards-tech, LLC
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy of
//  this software and associated documentation files (the "Software"), to deal in
//  the Software without restriction, including without limitation the rights to use,
//  copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the
//  Software, and to permit persons to whom the Software is furnished to do so,
//  subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in all
//  copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
//  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
//  PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
//  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
//  OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
//  SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


#include "RTIMULib.h"
#include <sys/socket.h>
#include <netinet/in.h>
#include <errno.h>
#include <math.h>
#define PORT 9003
#define PI 3.14159265

int main()
{
    int sampleCount = 0;
    int sampleRate = 0;
    uint64_t rateTimer;
    uint64_t displayTimer;
    uint64_t now;

    //Creating variables for sockets
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int opt = 1;
    int addrlen = sizeof(address);
    char buffer[1024] = {0};
    const char *hello = "Hellooooooooowwwww";
    //static char hello;


    //  Using RTIMULib here allows it to use the .ini file generated by RTIMULibDemo.
    //  Or, you can create the .ini in some other directory by using:
    //      RTIMUSettings *settings = new RTIMUSettings("<directory path>", "RTIMULib");
    //  where <directory path> is the path to where the .ini file is to be loaded/saved

    RTIMUSettings *settings = new RTIMUSettings("RTIMULib");

    RTIMU *imu = RTIMU::createIMU(settings);

    if ((imu == NULL) || (imu->IMUType() == RTIMU_TYPE_NULL)) {
        printf("No IMU found\n");
        exit(1);
    }

    //  This is an opportunity to manually override any settings before the call IMUInit

    //  set up IMU

    imu->IMUInit();

    //  this is a convenient place to change fusion parameters

    imu->setSlerpPower(0.02);
    imu->setGyroEnable(true);
    imu->setAccelEnable(true);
    imu->setCompassEnable(true);

    //  set up for rate timer

    rateTimer = displayTimer = RTMath::currentUSecsSinceEpoch();

    //  now just process data

    //Added for creating TCP socket
    // Creating socket file descriptor
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0)
    {
        perror("socket failed");
        exit(EXIT_FAILURE);
    }

    // Forcefully attaching socket to the port 8080
    if (setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT,
                                                  &opt, sizeof(opt)))
    {
        perror("setsockopt");
        exit(EXIT_FAILURE);
    }
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons( PORT );

    // Forcefully attaching socket to the port 8080
    if (bind(server_fd, (struct sockaddr *)&address, 
                                 sizeof(address))<0)
    {
        perror("bind failed");
        exit(EXIT_FAILURE);
    }
    while(1){
        if (listen(server_fd, 3) < 0)
        {
            perror("listen");
            exit(EXIT_FAILURE);
        }
        printf("Waiting for connection.\n" );
        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0)
        {
            perror("accept");
            exit(EXIT_FAILURE);
        }
        printf("Client connected.. Sending data !! \n" );

        while (1) {
            //  poll at the rate recommended by the IMU

            usleep(imu->IMUGetPollInterval() * 1000);

            while (imu->IMURead()) {
                RTIMU_DATA imuData = imu->getIMUData();
                sampleCount++;

                now = RTMath::currentUSecsSinceEpoch();

                //  display 10 times per second

                if ((now - displayTimer) > 100000) {
                    hello = RTMath::displayDegrees("", imuData.fusionPose);
                    float compass_data = 0.0;
                    float compass_x = imuData.compass.x() * RTMATH_RAD_TO_DEGREE;
                    float compass_y = imuData.compass.y() * RTMATH_RAD_TO_DEGREE;
                    float compass_z = imuData.compass.z() * RTMATH_RAD_TO_DEGREE;

                    if(compass_y>0){
                        compass_data = 90-atan(compass_x/compass_y) * 180/PI;

                    }
                    else if(compass_y < 0) {
                        compass_data = 270-atan(compass_x/compass_y) * 180/PI;;
                    }
                    else if(compass_y == 0){
                        if(compass_x < 0 ){
                            compass_data = 180.0;
                        }else{
                            compass_data = 0.0;
                        }
                    }
                    //double angle = atan2(imuData.compass.y() * RTMATH_RAD_TO_DEGREE , imuData.compass.x() * RTMATH_RAD_TO_DEGREE );
                    int send_result = send(new_socket , hello , strlen(hello) , MSG_NOSIGNAL );
                    //printf("Sample rate %d: %s\n", sampleRate, hello);
                    printf("Fused: %s || Raw Data: %f\n", hello,compass_data);

                    //printf("Angle %f \n", angle);
                    fflush(stdout);
                    displayTimer = now;
                    if(send_result<=0){
                        printf("Client disconnected..");
                        close(new_socket);


                        printf("Waiting for connection.\n");
                        if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen))<0)
                        {
                            perror("accept");
                            exit(EXIT_FAILURE);
                        }
                        printf("Client connected.. Sending data !! \n" );

                    }
                }

                //  update rate every second

                if ((now - rateTimer) > 1000000) {
                    sampleRate = sampleCount;
                    sampleCount = 0;
                    rateTimer = now;
                }
            }
        }
        close(new_socket);

    }
    //valread = read( new_socket , buffer, 1024);

    //send(new_socket , hello , strlen(hello) , 0 );
    //printf("Hello message sent\n");
    //Socket END

    //close(new_socket);
    close(server_fd);
}

